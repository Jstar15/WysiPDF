// scripts/gen-inline-icons.js
const fs = require('fs');
const path = require('path');

const ICONS_DIR = path.resolve(__dirname, '../src/assets/icons'); // adjust if your icons are elsewhere
const OUT_FILE = path.resolve(__dirname, '../src/assets/icon-contents.ts'); // output module

function normalizeName(filename) {
  return filename
    .replace(/\.[^/.]+$/, '')             // strip extension
    .replace(/_\d+dp.*$/,'')             // remove size/metadata suffix like _24dp...
    .replace(/\s*\(\d+\)$/, '')          // remove (1) etc.
    .replace(/-+/g, '_');                // unify separators to underscores
}

function escapeForTemplateLiteral(str) {
  // escape backticks and ${ so they don't break the template literal
  return str.replace(/`/g, '\\`').replace(/\$\{/g, '\\${');
}

function main() {
  if (!fs.existsSync(ICONS_DIR)) {
    console.error(`Icons directory does not exist: ${ICONS_DIR}`);
    process.exit(1);
  }

  const entries = fs.readdirSync(ICONS_DIR, { withFileTypes: true });
  const map = new Map();

  function walk(dir) {
    const items = fs.readdirSync(dir, { withFileTypes: true });
    for (const item of items) {
      const full = path.join(dir, item.name);
      if (item.isDirectory()) {
        walk(full);
      } else if (item.isFile() && /\.svg$/i.test(item.name)) {
        const key = normalizeName(item.name);
        if (map.has(key)) {
          console.warn(`Skipping duplicate normalized name: ${item.name} -> ${key}`);
          continue;
        }
        let content = fs.readFileSync(full, 'utf8');
        content = escapeForTemplateLiteral(content);
        map.set(key, content);
      }
    }
  }

  walk(ICONS_DIR);

  const sortedKeys = Array.from(map.keys()).sort();

  // Build TS output
  const lines = [];
  lines.push('// auto-generated by scripts/gen-inline-icons.js');
  lines.push('// run this script to refresh');
  lines.push('');
  lines.push('export const ICON_SVGS: Record<string, string> = {');
  for (const key of sortedKeys) {
    const svgContent = map.get(key);
    lines.push(`  '${key}': \`${svgContent}\`,`);
  }
  lines.push('};');
  lines.push('');
  lines.push('export const ICON_NAMES = [');
  for (const key of sortedKeys) {
    lines.push(`  '${key}',`);
  }
  lines.push('] as const;');
  lines.push('export type IconName = (typeof ICON_NAMES)[number];');
  lines.push('');

  // Ensure output directory exists
  const outDir = path.dirname(OUT_FILE);
  if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });

  fs.writeFileSync(OUT_FILE, lines.join('\n'), 'utf8');
  console.log(`Wrote ${sortedKeys.length} icons to ${OUT_FILE}`);
}

main();
